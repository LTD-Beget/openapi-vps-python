# coding: utf-8

"""
    API Облачных серверов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.6.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_vps import schemas  # noqa: F401


class StructuresSoftwareMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            is_new = schemas.BoolSchema
            is_pinned = schemas.BoolSchema
            icon = schemas.StrSchema
            icon2x = schemas.StrSchema
            logo = schemas.StrSchema
            logo2x = schemas.StrSchema
            primary_color = schemas.StrSchema
            secondary_color = schemas.StrSchema
            weight = schemas.Float32Schema
            __annotations__ = {
                "is_new": is_new,
                "is_pinned": is_pinned,
                "icon": icon,
                "icon2x": icon2x,
                "logo": logo,
                "logo2x": logo2x,
                "primary_color": primary_color,
                "secondary_color": secondary_color,
                "weight": weight,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_new"]) -> MetaOapg.properties.is_new: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_pinned"]) -> MetaOapg.properties.is_pinned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon2x"]) -> MetaOapg.properties.icon2x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo2x"]) -> MetaOapg.properties.logo2x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_color"]) -> MetaOapg.properties.primary_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondary_color"]) -> MetaOapg.properties.secondary_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weight"]) -> MetaOapg.properties.weight: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_new", "is_pinned", "icon", "icon2x", "logo", "logo2x", "primary_color", "secondary_color", "weight", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_new"]) -> typing.Union[MetaOapg.properties.is_new, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_pinned"]) -> typing.Union[MetaOapg.properties.is_pinned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon2x"]) -> typing.Union[MetaOapg.properties.icon2x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo2x"]) -> typing.Union[MetaOapg.properties.logo2x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_color"]) -> typing.Union[MetaOapg.properties.primary_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondary_color"]) -> typing.Union[MetaOapg.properties.secondary_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weight"]) -> typing.Union[MetaOapg.properties.weight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_new", "is_pinned", "icon", "icon2x", "logo", "logo2x", "primary_color", "secondary_color", "weight", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_new: typing.Union[MetaOapg.properties.is_new, bool, schemas.Unset] = schemas.unset,
        is_pinned: typing.Union[MetaOapg.properties.is_pinned, bool, schemas.Unset] = schemas.unset,
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        icon2x: typing.Union[MetaOapg.properties.icon2x, str, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
        logo2x: typing.Union[MetaOapg.properties.logo2x, str, schemas.Unset] = schemas.unset,
        primary_color: typing.Union[MetaOapg.properties.primary_color, str, schemas.Unset] = schemas.unset,
        secondary_color: typing.Union[MetaOapg.properties.secondary_color, str, schemas.Unset] = schemas.unset,
        weight: typing.Union[MetaOapg.properties.weight, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StructuresSoftwareMetadata':
        return super().__new__(
            cls,
            *args,
            is_new=is_new,
            is_pinned=is_pinned,
            icon=icon,
            icon2x=icon2x,
            logo=logo,
            logo2x=logo2x,
            primary_color=primary_color,
            secondary_color=secondary_color,
            weight=weight,
            _configuration=_configuration,
            **kwargs,
        )
