# coding: utf-8

"""
    API Облачных серверов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.6.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_vps import schemas  # noqa: F401


class StructuresSoftwareLicense(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            type = schemas.StrSchema
            display_name = schemas.StrSchema
            plan = schemas.StrSchema
            additional_info = schemas.StrSchema
            additional_info_en = schemas.StrSchema
            primary = schemas.BoolSchema
        
            @staticmethod
            def billing() -> typing.Type['StructuresSoftwareLicenseBillingType']:
                return StructuresSoftwareLicenseBillingType
            __annotations__ = {
                "id": id,
                "type": type,
                "display_name": display_name,
                "plan": plan,
                "additional_info": additional_info,
                "additional_info_en": additional_info_en,
                "primary": primary,
                "billing": billing,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_info"]) -> MetaOapg.properties.additional_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_info_en"]) -> MetaOapg.properties.additional_info_en: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing"]) -> 'StructuresSoftwareLicenseBillingType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "display_name", "plan", "additional_info", "additional_info_en", "primary", "billing", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union[MetaOapg.properties.plan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_info"]) -> typing.Union[MetaOapg.properties.additional_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_info_en"]) -> typing.Union[MetaOapg.properties.additional_info_en, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing"]) -> typing.Union['StructuresSoftwareLicenseBillingType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "display_name", "plan", "additional_info", "additional_info_en", "primary", "billing", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        plan: typing.Union[MetaOapg.properties.plan, str, schemas.Unset] = schemas.unset,
        additional_info: typing.Union[MetaOapg.properties.additional_info, str, schemas.Unset] = schemas.unset,
        additional_info_en: typing.Union[MetaOapg.properties.additional_info_en, str, schemas.Unset] = schemas.unset,
        primary: typing.Union[MetaOapg.properties.primary, bool, schemas.Unset] = schemas.unset,
        billing: typing.Union['StructuresSoftwareLicenseBillingType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StructuresSoftwareLicense':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            display_name=display_name,
            plan=plan,
            additional_info=additional_info,
            additional_info_en=additional_info_en,
            primary=primary,
            billing=billing,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_vps.model.structures_software_license_billing_type import StructuresSoftwareLicenseBillingType
