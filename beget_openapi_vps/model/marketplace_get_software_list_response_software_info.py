# coding: utf-8

"""
    API Облачных серверов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.2.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_vps import schemas  # noqa: F401


class MarketplaceGetSoftwareListResponseSoftwareInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            name = schemas.StrSchema
            display_name = schemas.StrSchema
            version = schemas.StrSchema
            description = schemas.StrSchema
            description_en = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['StructuresSoftwareMetadata']:
                return StructuresSoftwareMetadata
            
            
            class field_data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MarketplaceFieldDesc']:
                        return MarketplaceFieldDesc
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MarketplaceFieldDesc'], typing.List['MarketplaceFieldDesc']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'field_data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MarketplaceFieldDesc':
                    return super().__getitem__(i)
        
            @staticmethod
            def requirements() -> typing.Type['MarketplaceGetSoftwareListResponseSoftwareInfoRequirements']:
                return MarketplaceGetSoftwareListResponseSoftwareInfoRequirements
            
            
            class category(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StructuresSoftwareCategory']:
                        return StructuresSoftwareCategory
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StructuresSoftwareCategory'], typing.List['StructuresSoftwareCategory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StructuresSoftwareCategory':
                    return super().__getitem__(i)
            slug = schemas.StrSchema
            documentation_slug = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "display_name": display_name,
                "version": version,
                "description": description,
                "description_en": description_en,
                "metadata": metadata,
                "field_data": field_data,
                "requirements": requirements,
                "category": category,
                "slug": slug,
                "documentation_slug": documentation_slug,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description_en"]) -> MetaOapg.properties.description_en: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'StructuresSoftwareMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_data"]) -> MetaOapg.properties.field_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requirements"]) -> 'MarketplaceGetSoftwareListResponseSoftwareInfoRequirements': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentation_slug"]) -> MetaOapg.properties.documentation_slug: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "display_name", "version", "description", "description_en", "metadata", "field_data", "requirements", "category", "slug", "documentation_slug", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description_en"]) -> typing.Union[MetaOapg.properties.description_en, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['StructuresSoftwareMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_data"]) -> typing.Union[MetaOapg.properties.field_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requirements"]) -> typing.Union['MarketplaceGetSoftwareListResponseSoftwareInfoRequirements', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentation_slug"]) -> typing.Union[MetaOapg.properties.documentation_slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "display_name", "version", "description", "description_en", "metadata", "field_data", "requirements", "category", "slug", "documentation_slug", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        description_en: typing.Union[MetaOapg.properties.description_en, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union['StructuresSoftwareMetadata', schemas.Unset] = schemas.unset,
        field_data: typing.Union[MetaOapg.properties.field_data, list, tuple, schemas.Unset] = schemas.unset,
        requirements: typing.Union['MarketplaceGetSoftwareListResponseSoftwareInfoRequirements', schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, list, tuple, schemas.Unset] = schemas.unset,
        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
        documentation_slug: typing.Union[MetaOapg.properties.documentation_slug, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarketplaceGetSoftwareListResponseSoftwareInfo':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            display_name=display_name,
            version=version,
            description=description,
            description_en=description_en,
            metadata=metadata,
            field_data=field_data,
            requirements=requirements,
            category=category,
            slug=slug,
            documentation_slug=documentation_slug,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_vps.model.marketplace_field_desc import MarketplaceFieldDesc
from beget_openapi_vps.model.marketplace_get_software_list_response_software_info_requirements import MarketplaceGetSoftwareListResponseSoftwareInfoRequirements
from beget_openapi_vps.model.structures_software_category import StructuresSoftwareCategory
from beget_openapi_vps.model.structures_software_metadata import StructuresSoftwareMetadata
