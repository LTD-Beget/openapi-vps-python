# coding: utf-8

"""
    API Облачных серверов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.6.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_vps import schemas  # noqa: F401


class MarketplaceFieldCommon(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            variable = schemas.StrSchema
            label = schemas.StrSchema
            label_en = schemas.StrSchema
            description = schemas.StrSchema
            description_en = schemas.StrSchema
            default_value = schemas.StrSchema
            is_additional = schemas.BoolSchema
            is_required = schemas.BoolSchema
            is_custom = schemas.BoolSchema
            validation_regex = schemas.StrSchema
            validation_error_text = schemas.StrSchema
            validation_error_text_en = schemas.StrSchema
            __annotations__ = {
                "variable": variable,
                "label": label,
                "label_en": label_en,
                "description": description,
                "description_en": description_en,
                "default_value": default_value,
                "is_additional": is_additional,
                "is_required": is_required,
                "is_custom": is_custom,
                "validation_regex": validation_regex,
                "validation_error_text": validation_error_text,
                "validation_error_text_en": validation_error_text_en,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variable"]) -> MetaOapg.properties.variable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_en"]) -> MetaOapg.properties.label_en: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description_en"]) -> MetaOapg.properties.description_en: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_value"]) -> MetaOapg.properties.default_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_additional"]) -> MetaOapg.properties.is_additional: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_required"]) -> MetaOapg.properties.is_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_custom"]) -> MetaOapg.properties.is_custom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validation_regex"]) -> MetaOapg.properties.validation_regex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validation_error_text"]) -> MetaOapg.properties.validation_error_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validation_error_text_en"]) -> MetaOapg.properties.validation_error_text_en: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["variable", "label", "label_en", "description", "description_en", "default_value", "is_additional", "is_required", "is_custom", "validation_regex", "validation_error_text", "validation_error_text_en", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variable"]) -> typing.Union[MetaOapg.properties.variable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_en"]) -> typing.Union[MetaOapg.properties.label_en, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description_en"]) -> typing.Union[MetaOapg.properties.description_en, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_value"]) -> typing.Union[MetaOapg.properties.default_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_additional"]) -> typing.Union[MetaOapg.properties.is_additional, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_required"]) -> typing.Union[MetaOapg.properties.is_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_custom"]) -> typing.Union[MetaOapg.properties.is_custom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validation_regex"]) -> typing.Union[MetaOapg.properties.validation_regex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validation_error_text"]) -> typing.Union[MetaOapg.properties.validation_error_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validation_error_text_en"]) -> typing.Union[MetaOapg.properties.validation_error_text_en, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["variable", "label", "label_en", "description", "description_en", "default_value", "is_additional", "is_required", "is_custom", "validation_regex", "validation_error_text", "validation_error_text_en", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        variable: typing.Union[MetaOapg.properties.variable, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        label_en: typing.Union[MetaOapg.properties.label_en, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        description_en: typing.Union[MetaOapg.properties.description_en, str, schemas.Unset] = schemas.unset,
        default_value: typing.Union[MetaOapg.properties.default_value, str, schemas.Unset] = schemas.unset,
        is_additional: typing.Union[MetaOapg.properties.is_additional, bool, schemas.Unset] = schemas.unset,
        is_required: typing.Union[MetaOapg.properties.is_required, bool, schemas.Unset] = schemas.unset,
        is_custom: typing.Union[MetaOapg.properties.is_custom, bool, schemas.Unset] = schemas.unset,
        validation_regex: typing.Union[MetaOapg.properties.validation_regex, str, schemas.Unset] = schemas.unset,
        validation_error_text: typing.Union[MetaOapg.properties.validation_error_text, str, schemas.Unset] = schemas.unset,
        validation_error_text_en: typing.Union[MetaOapg.properties.validation_error_text_en, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarketplaceFieldCommon':
        return super().__new__(
            cls,
            *args,
            variable=variable,
            label=label,
            label_en=label_en,
            description=description,
            description_en=description_en,
            default_value=default_value,
            is_additional=is_additional,
            is_required=is_required,
            is_custom=is_custom,
            validation_regex=validation_regex,
            validation_error_text=validation_error_text,
            validation_error_text_en=validation_error_text_en,
            _configuration=_configuration,
            **kwargs,
        )
