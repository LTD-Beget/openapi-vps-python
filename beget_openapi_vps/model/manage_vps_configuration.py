# coding: utf-8

"""
    API Облачных серверов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.6.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_vps import schemas  # noqa: F401


class ManageVpsConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            cpu_count = schemas.IntSchema
            disk_size = schemas.IntSchema
            memory = schemas.IntSchema
            bandwidth_public = schemas.IntSchema
            price_day = schemas.Float64Schema
            price_month = schemas.Float64Schema
            available = schemas.BoolSchema
            custom = schemas.BoolSchema
            configurable = schemas.BoolSchema
            region = schemas.StrSchema
            group = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "cpu_count": cpu_count,
                "disk_size": disk_size,
                "memory": memory,
                "bandwidth_public": bandwidth_public,
                "price_day": price_day,
                "price_month": price_month,
                "available": available,
                "custom": custom,
                "configurable": configurable,
                "region": region,
                "group": group,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu_count"]) -> MetaOapg.properties.cpu_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disk_size"]) -> MetaOapg.properties.disk_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bandwidth_public"]) -> MetaOapg.properties.bandwidth_public: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_day"]) -> MetaOapg.properties.price_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_month"]) -> MetaOapg.properties.price_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available"]) -> MetaOapg.properties.available: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configurable"]) -> MetaOapg.properties.configurable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "cpu_count", "disk_size", "memory", "bandwidth_public", "price_day", "price_month", "available", "custom", "configurable", "region", "group", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu_count"]) -> typing.Union[MetaOapg.properties.cpu_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disk_size"]) -> typing.Union[MetaOapg.properties.disk_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> typing.Union[MetaOapg.properties.memory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bandwidth_public"]) -> typing.Union[MetaOapg.properties.bandwidth_public, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_day"]) -> typing.Union[MetaOapg.properties.price_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_month"]) -> typing.Union[MetaOapg.properties.price_month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available"]) -> typing.Union[MetaOapg.properties.available, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom"]) -> typing.Union[MetaOapg.properties.custom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configurable"]) -> typing.Union[MetaOapg.properties.configurable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "cpu_count", "disk_size", "memory", "bandwidth_public", "price_day", "price_month", "available", "custom", "configurable", "region", "group", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        cpu_count: typing.Union[MetaOapg.properties.cpu_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        disk_size: typing.Union[MetaOapg.properties.disk_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        memory: typing.Union[MetaOapg.properties.memory, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bandwidth_public: typing.Union[MetaOapg.properties.bandwidth_public, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        price_day: typing.Union[MetaOapg.properties.price_day, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price_month: typing.Union[MetaOapg.properties.price_month, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        available: typing.Union[MetaOapg.properties.available, bool, schemas.Unset] = schemas.unset,
        custom: typing.Union[MetaOapg.properties.custom, bool, schemas.Unset] = schemas.unset,
        configurable: typing.Union[MetaOapg.properties.configurable, bool, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        group: typing.Union[MetaOapg.properties.group, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ManageVpsConfiguration':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            cpu_count=cpu_count,
            disk_size=disk_size,
            memory=memory,
            bandwidth_public=bandwidth_public,
            price_day=price_day,
            price_month=price_month,
            available=available,
            custom=custom,
            configurable=configurable,
            region=region,
            group=group,
            _configuration=_configuration,
            **kwargs,
        )
