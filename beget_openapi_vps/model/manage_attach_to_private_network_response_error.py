# coding: utf-8

"""
    API Облачных серверов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_vps import schemas  # noqa: F401


class ManageAttachToPrivateNetworkResponseError(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class code(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'enum'
                    enum_value_to_name = {
                        "INTERNAL_ERROR": "INTERNAL_ERROR",
                        "GUEST_OS_ERROR": "GUEST_OS_ERROR",
                        "NO_AVAILABLE_ADDRESSES": "NO_AVAILABLE_ADDRESSES",
                        "INVALID_ADDRESS": "INVALID_ADDRESS",
                        "ADDRESS_SUBNET_MISMATCH": "ADDRESS_SUBNET_MISMATCH",
                        "ADDRESS_ALREADY_RESERVED": "ADDRESS_ALREADY_RESERVED",
                        "ADDRESS_UNAVAILABLE": "ADDRESS_UNAVAILABLE",
                    }
                
                @schemas.classproperty
                def INTERNAL_ERROR(cls):
                    return cls("INTERNAL_ERROR")
                
                @schemas.classproperty
                def GUEST_OS_ERROR(cls):
                    return cls("GUEST_OS_ERROR")
                
                @schemas.classproperty
                def NO_AVAILABLE_ADDRESSES(cls):
                    return cls("NO_AVAILABLE_ADDRESSES")
                
                @schemas.classproperty
                def INVALID_ADDRESS(cls):
                    return cls("INVALID_ADDRESS")
                
                @schemas.classproperty
                def ADDRESS_SUBNET_MISMATCH(cls):
                    return cls("ADDRESS_SUBNET_MISMATCH")
                
                @schemas.classproperty
                def ADDRESS_ALREADY_RESERVED(cls):
                    return cls("ADDRESS_ALREADY_RESERVED")
                
                @schemas.classproperty
                def ADDRESS_UNAVAILABLE(cls):
                    return cls("ADDRESS_UNAVAILABLE")
            message = schemas.StrSchema
            __annotations__ = {
                "code": code,
                "message": message,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ManageAttachToPrivateNetworkResponseError':
        return super().__new__(
            cls,
            *args,
            code=code,
            message=message,
            _configuration=_configuration,
            **kwargs,
        )
