# coding: utf-8

"""
    API Облачных серверов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.6.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_vps import schemas  # noqa: F401


class ManageReserveVpsSubdomainResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            vps_subdomain = schemas.StrSchema
        
            @staticmethod
            def error() -> typing.Type['ManageReserveVpsSubdomainResponseError']:
                return ManageReserveVpsSubdomainResponseError
            __annotations__ = {
                "vps_subdomain": vps_subdomain,
                "error": error,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vps_subdomain"]) -> MetaOapg.properties.vps_subdomain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'ManageReserveVpsSubdomainResponseError': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vps_subdomain", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vps_subdomain"]) -> typing.Union[MetaOapg.properties.vps_subdomain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union['ManageReserveVpsSubdomainResponseError', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vps_subdomain", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        vps_subdomain: typing.Union[MetaOapg.properties.vps_subdomain, str, schemas.Unset] = schemas.unset,
        error: typing.Union['ManageReserveVpsSubdomainResponseError', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ManageReserveVpsSubdomainResponse':
        return super().__new__(
            cls,
            *args,
            vps_subdomain=vps_subdomain,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )

from beget_openapi_vps.model.manage_reserve_vps_subdomain_response_error import ManageReserveVpsSubdomainResponseError
